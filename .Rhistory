library(corrgram)
library(corrplot)
library(ROCR)
library(xgboost)
library(ggplot2)
library(GGally)
library(readxl)
library(dplyr)
library(MASS)
library(caret)
library(readxl)
library(e1071)
hr_data_train <- read_excel("hr_data_train.xlsx",sheet = 1)
hr_data_test <- read_excel("hr_data_test.xlsx",sheet = 1)
table(is.na(hr_data_test))
table(is.na(hr_data_train))
hr_data_train
hr_data_test <- na.omit(hr_data_test) #결측치 제거해서 넣기
hr_data_train <-na.omit(hr_data_train)
table(is.na(hr_data_test))
table(is.na(hr_data_train))
hr_data_train
hr_data_train[-c(1)]
str(hr_data_train)
hr_data_train<- hr_data_train[-c(1)]
hr_data_train$A1 <- as.factor(hr_data_train$A1)
hr_data_train$A3 <- as.factor(hr_data_train$A3)
hr_data_train$A4 <- as.factor(hr_data_train$A4)
hr_data_train$A11 <- as.factor(hr_data_train$A11)
hr_data_train$A12 <- as.factor(hr_data_train$A12)
str(hr_data_train)
hr_data_train
hr_data_test<- hr_data_test[-c(1)]
hr_data_test$A1 <- as.factor(hr_data_test$A1)
hr_data_test$A3 <- as.factor(hr_data_test$A3)
hr_data_test$A4 <- as.factor(hr_data_test$A4)
hr_data_test$A11 <- as.factor(hr_data_test$A11)
hr_data_test$A12 <- as.factor(hr_data_test$A12)
str(hr_data_train)
#-----------등급 별로 나누기--------------------------
#전체
train.total <- hr_data_train
test.total <- hr_data_test
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
table(is.na(train_data_num))
train_x <- train_data_num[,-c(1)]
train_x
train_data <- as.data.frame(train.total)
test_data <-as.data.frame(test.total)
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
table(is.na(train_data_num))
train_x <- train_data_num[,-c(1)]
train_x
train_matrix_x <-as.matrix(train_x)
str(train_matrix_x)
View(train_data_num[,c(1)])
table(is.na(train_data_num[,c(1)]))
train_y <- train_data_num[,c(1)]
train_y
View(train_y)
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))-1
train_y
train_matrix_y <-as.matrix(train_y)
train_matrix_y
test_x <- test_data[,-c(1,3,4,11,12)]
test_matrix_x <-as.matrix(test_x)
test_matrix_x
test_y <- test_data[,-c(2:42)]
test_matrix_y <-as.matrix(test_y)
test_y <- as.numeric(test_data$A1, levels=c("N","Y"),labels=c("0","1"))-1
#----------다른 방법 이게 맞다
train_labels_y <-as.numeric(train_matrix_y)
test_labels_y <-as.numeric(test_matrix_y)
length(train_labels_y) + length(test_labels_y)
train.xm <- xgb.DMatrix(data = train_matrix_x , label = train_labels_y)
test.xm <- xgb.DMatrix(data = test_matrix_x,label = test_labels_y)
param <-  list("objective" = "binary:logistic",
"bootster" = "gbtree",
"num_class" = 12)
train.xm
test.xm
cv.nround <- 11
cv.nfold <- 5
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
hr_data_train <- read_excel("hr_data_train.xlsx",sheet = 1)
hr_data_test <- read_excel("hr_data_test.xlsx",sheet = 1)
hr_data_test <- na.omit(hr_data_test) #결측치 제거해서 넣기
hr_data_train <-na.omit(hr_data_train)
table(is.na(hr_data_test))
table(is.na(hr_data_train))
hr_data_train
hr_data_train[-c(1)]
hr_data_train<- hr_data_train[-c(1)]
str(hr_data_test)
hr_data_test<- hr_data_test[-c(1)]
#-----------등급 별로 나누기--------------------------
#전체
train.total <- hr_data_train
test.total <- hr_data_test
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
table(is.na(train_data_num))
train_x <- train_data_num[,-c(1)]
train_x
train_data <- as.data.frame(train.total)
test_data <-as.data.frame(test.total)
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
table(is.na(train_data_num))
train_x <- train_data_num[,-c(1)]
train_x
train_matrix_x <-as.matrix(train_x)
str(train_matrix_x)
View(train_data_num[,c(1)])
table(is.na(train_data_num[,c(1)]))
train_y <- train_data_num[,c(1)]
train_matrix_y <-as.matrix(train_y)
test_x <- test_data[,-c(1,3,4,11,12)]
test_matrix_x <-as.matrix(test_x)
test_matrix_x
test_y <- test_data[,-c(2:42)]
test_matrix_y <-as.matrix(test_y)
test_y <- as.numeric(test_data$A1, levels=c("N","Y"),labels=c("0","1"))-1
#----------다른 방법 이게 맞다
train_labels_y <-as.numeric(train_matrix_y)
test_labels_y <-as.numeric(test_matrix_y)
length(train_labels_y) + length(test_labels_y)
train.xm <- xgb.DMatrix(data = train_matrix_x , label = train_labels_y)
test.xm <- xgb.DMatrix(data = test_matrix_x,label = test_labels_y)
param <-  list("objective" = "binary:logistic",
"bootster" = "gbtree",
"num_class" = 12)
train.xm
test.xm
train.xm
cv.nround <- 11
cv.nfold <- 5
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
train_labels_y
type(train_labels_y)
as.type(train_labels_y)
str(train_labels_y)
cv_model1 <- xgb.cv(data= train_matrix_x, label = train_labels_y, params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
train_data_num$A1
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))
train_y
train_matrix_y <-as.matrix(train_y)
train_matrix_y
test_x <- test_data[,-c(1,3,4,11,12)]
test_matrix_x <-as.matrix(test_x)
test_matrix_x
test_y <- test_data[,-c(2:42)]
#----------다른 방법 이게 맞다
train_labels_y <-as.numeric(train_matrix_y)
test_labels_y <-as.numeric(test_matrix_y)
length(train_labels_y) + length(test_labels_y)
str(train_labels_y)
train.xm <- xgb.DMatrix(data = train_matrix_x , label = train_labels_y)
test.xm <- xgb.DMatrix(data = test_matrix_x,label = test_labels_y)
param <-  list("objective" = "binary:logistic",
"bootster" = "gbtree",
"num_class" = 12)
train.xm
test.xm
train.xm
cv.nround <- 11
cv.nfold <- 5
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
train_y
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))
train_y
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))-1
train_y
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))
train_y
#----------다른 방법 이게 맞다
train_labels_y <-as.numeric(train_y)
test_labels_y <-as.numeric(test_matrix_y)
length(train_labels_y) + length(test_labels_y)
str(train_labels_y)
train.xm <- xgb.DMatrix(data = train_matrix_x , label = train_labels_y)
test.xm <- xgb.DMatrix(data = test_matrix_x,label = test_labels_y)
param <-  list("objective" = "binary:logistic",
"bootster" = "gbtree",
"num_class" = 12)
train.xm
test.xm
train.xm
cv.nround <- 11
cv.nfold <- 5
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
train_y
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
hr_data_train <- read_excel("hr_data_train.xlsx",sheet = 1)
hr_data_test <- read_excel("hr_data_test.xlsx",sheet = 1)
hr_data_test <- na.omit(hr_data_test) #결측치 제거해서 넣기
hr_data_train <-na.omit(hr_data_train)
hr_data_train[-c(1)]
str(hr_data_train)
hr_data_train<- hr_data_train[-c(1)]
hr_data_train$A1 <- as.factor(hr_data_train$A1)
hr_data_train$A3 <- as.factor(hr_data_train$A3)
hr_data_train$A4 <- as.factor(hr_data_train$A4)
hr_data_train$A11 <- as.factor(hr_data_train$A11)
hr_data_train$A12 <- as.factor(hr_data_train$A12)
hr_data_test<- hr_data_test[-c(1)]
hr_data_test$A1 <- as.factor(hr_data_test$A1)
hr_data_test$A3 <- as.factor(hr_data_test$A3)
hr_data_test$A4 <- as.factor(hr_data_test$A4)
hr_data_test$A11 <- as.factor(hr_data_test$A11)
hr_data_test$A12 <- as.factor(hr_data_test$A12)
str(hr_data_train)
#-----------등급 별로 나누기--------------------------
#전체
train.total <- hr_data_train
test.total <- hr_data_test
train.total
str(train.total)
train_data <- as.data.frame(train.total)
test_data <-as.data.frame(test.total)
train_data$A1
summary(train_data$A1)
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
table(is.na(train_data_num))
str(train_data_num)
train_x <- train_data_num[,-c(1)]
train_x
str(train_x)
str(train_matrix_x)
str(train_matrix_x)
train_matrix_x <-as.matrix(train_x)
str(train_matrix_x)
str(train_x)
table(is.na(train_data_num[,c(1)]))
train_y <- train_data_num[,c(1)]
train_y
train_data_num$A1
train_y
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))
train_y
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))-1
train_y
#----------다른 방법 이게 맞다
train_labels_y <-as.numeric(train_y)
train.xm <- xgb.DMatrix(data = train_x , label = train_labels_y)
train.xm <- xgb.DMatrix(data = train_x , label = train_y)
train_x<-as.matrix(train_x)
train_y<-as.matrix(train_y)
train.xm <- xgb.DMatrix(data = train_x , label = train_y)
param <-  list("objective" = "binary:logistic",
"bootster" = "gbtree",
"num_class" = 12)
train.xm
cv.nround <- 11
cv.nfold <- 5
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
train_x
train_y
train_x
#-----------등급 별로 나누기--------------------------
#전체
train.total <- hr_data_train
train_data$A1
train_data
train_data$A1
train_data
summary(train_data)
str(train_data)
str(train_data$A1)
str(train_data$A1)
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
str(train_data_num)
train_x <- train_data_num[,-c(1)]
str(train_x)
train_matrix_x <-as.matrix(train_x)
str(train_matrix_x)
View(train_data_num[,c(1)])
table(is.na(train_data_num[,c(1)]))
train_y <- train_data_num[,c(1)]
train_y
train_data_num$A1
View(train_y)
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))-1
train_y
train_matrix_y <-as.matrix(train_y)
train_matrix_y
test_x <- test_data[,-c(1,3,4,11,12)]
test_matrix_x <-as.matrix(test_x)
test_matrix_x
test_y <- test_data[,-c(2:42)]
test_matrix_y <-as.matrix(test_y)
test_matrix_y
test_y <- as.numeric(test_data$A1, levels=c("N","Y"),labels=c("0","1"))-1
test_y
cv_model1 = xgboost(boosting = 'gbtree',
data = train_matrix_x , label = train_matrix_y,max_dept= 5,
nfold = 5,eta = 0.01, prediction = T, scale_pos_weight = 0.7,
nrounds = 2000, early_stoppimg_rounds = 500,objective ='binary:logistic')
train_labels_y <-as.numeric(train_matrix_y)
test_labels_y <-as.numeric(test_matrix_y)
str(train_labels_y)
str(train_matrix_x)
train.xm <- xgb.DMatrix(data = train_matrix_x , label = train_matrix_y)
param <-  list("objective" = "binary:logistic",
"bootster" = "gbtree",
"num_class" = 12)
train.xm
test.xm
train.xm
cv.nround <- 11
cv.nfold <- 5
cv_model1 <- xgb.cv(data= train.xm,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
cv_model1 <- xgb.cv(data= train_matrix_x, label = train_matrix_y ,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
#XGboost
install.packages("xgb")
install.packages("xgboost")
install.packages("xgboost")
library(xgboost)
library(xgb)
cv_model1 <- xgb.cv(data= train_matrix_x, label = train_matrix_y ,params = param,
nfold = cv.nfold,nrounds = cv.nround,verbose = T)
cv_model1 = xgboost(boosting = 'gbtree',
data = train_matrix_x , label = train_matrix_y,max_dept= 5,
nfold = 5,eta = 0.01, prediction = T, scale_pos_weight = 0.7,
nrounds = 2000, early_stoppimg_rounds = 500,objective ='binary:logistic')
train_matrix_x <-as.matrix(train_x)
hr_data_train <- read_excel("hr_data_train.xlsx",sheet = 1)
hr_data_test <- read_excel("hr_data_test.xlsx",sheet = 1)
hr_data_test <- na.omit(hr_data_test) #결측치 제거해서 넣기
hr_data_train <-na.omit(hr_data_train)
hr_data_train[-c(1)]
str(hr_data_train)
hr_data_train<- hr_data_train[-c(1)]
hr_data_train$A1 <- as.factor(hr_data_train$A1)
hr_data_train$A3 <- as.factor(hr_data_train$A3)
hr_data_train$A4 <- as.factor(hr_data_train$A4)
hr_data_train$A11 <- as.factor(hr_data_train$A11)
hr_data_train$A12 <- as.factor(hr_data_train$A12)
hr_data_test<- hr_data_test[-c(1)]
hr_data_test$A1 <- as.factor(hr_data_test$A1)
hr_data_test$A3 <- as.factor(hr_data_test$A3)
hr_data_test$A4 <- as.factor(hr_data_test$A4)
hr_data_test$A11 <- as.factor(hr_data_test$A11)
hr_data_test$A12 <- as.factor(hr_data_test$A12)
hr_data_train <- read_excel("hr_data_train.xlsx",sheet = 1)
library(corrgram)
install.packages("GGally")
install.packages("MASS")
install.packages("e1071")
install.packages("ROCR")
install.packages("corrplot")
install.packages("corrgram")
library(corrgram)
library(corrplot)
library(ROCR)
library(xgboost)
library(ggplot2)
library(GGally)
library(readxl)
library(dplyr)
library(MASS)
library(caret)
library(readxl)
library(e1071)
library(caret)
#XGboost
install.packages("caret")
library(caret)
hr_data_train <- read_excel("hr_data_train.xlsx",sheet = 1)
hr_data_test <- read_excel("hr_data_test.xlsx",sheet = 1)
table(is.na(hr_data_test))
table(is.na(hr_data_train))
hr_data_train
hr_data_test <- na.omit(hr_data_test) #결측치 제거해서 넣기
hr_data_train <-na.omit(hr_data_train)
table(is.na(hr_data_test))
table(is.na(hr_data_train))
hr_data_train[-c(1)]
hr_data_train<- hr_data_train[-c(1)]
hr_data_train$A1 <- as.factor(hr_data_train$A1)
hr_data_train$A3 <- as.factor(hr_data_train$A3)
hr_data_train$A4 <- as.factor(hr_data_train$A4)
hr_data_train$A11 <- as.factor(hr_data_train$A11)
hr_data_train$A12 <- as.factor(hr_data_train$A12)
hr_data_test<- hr_data_test[-c(1)]
hr_data_test$A1 <- as.factor(hr_data_test$A1)
hr_data_test$A3 <- as.factor(hr_data_test$A3)
hr_data_test$A4 <- as.factor(hr_data_test$A4)
hr_data_test$A11 <- as.factor(hr_data_test$A11)
hr_data_test$A12 <- as.factor(hr_data_test$A12)
#-----------등급 별로 나누기--------------------------
#전체
train.total <- hr_data_train
test.total <- hr_data_test
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
str(train_data_num)
train_data <- as.data.frame(train.total)
test_data <-as.data.frame(test.total)
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_data_num
str(train_data_num)
train_x <- train_data_num[,-c(1)]
str(train_x)
train_matrix_x <-as.matrix(train_x)
str(train_matrix_x)
View(train_data_num[,c(1)])
train_y <- train_data_num[,c(1)]
#sgboost는 num 형태의 데이터만 사용하기때문에 성별,산지,등급,거리(카테고리)삭제
train_data_num <- train_data[,-c(3,4,11,12)]
train_x <- train_data_num[,-c(1)]
train_matrix_x <-as.matrix(train_x)
train_y <- train_data_num[,c(1)]
train_y <- as.numeric(train_data_num$A1, levels=c("N","Y"),labels=c("0","1"))-1
train_matrix_y <-as.matrix(train_y)
train_x
view(train_x)
View(train_x)
View(train_y)
cv_model1 = xgboost(boosting = 'gbtree',
data = train_matrix_x , label = train_matrix_y,max_dept= 5,
nfold = 5,eta = 0.01, prediction = T, scale_pos_weight = 0.7,
nrounds = 2000, early_stoppimg_rounds = 500,objective ='binary:logistic')
cv_model1 = xgboost(boosting = 'gbtree',
data = train_matrix_x , label = train_matrix_y,max_dept= 5,
nfold = 5,eta = 0.01, prediction = T, scale_pos_weight = 0.7,
nrounds = 5, early_stoppimg_rounds = 500,objective ='binary:logistic')
cv_model1 = xgboost(data = train_matrix_x , label = train_matrix_y,max.dept= 5,
eta = 0.01, scale_pos_weight = 0.7,
nrounds = 5,objective ='binary:logistic')
cv_model1 = xgboost(data = train_matrix_x , label = train_matrix_y,
eta = 0.01, scale_pos_weight = 0.7,
nrounds = 5,objective ='binary:logistic')
train_labels_y <-as.numeric(train_matrix_y)
test_labels_y <-as.numeric(test_matrix_y)
train.xm <- xgb.DMatrix(data = train_matrix_x , label = train_matrix_y)
source('C:/Users/bnmk1/OneDrive/바탕 화면/씨발/Xgboost/xgb.R', encoding = 'UTF-8', echo=TRUE)
cv_model2 <- xgb.train(data= train.xm, max.depth=4, eta =1,
ntread = 2 , nround = 2, nfold = 5)
cv_model2 <- xgb.train(data= train.xm, max.depth=4, eta =1,
ntread = 2 , nround = 2, nfold = 5,
objective = "binary:logistic")
cv_model2 <- xgb.train(data= train.xm, max.depth=4, eta =1,
nthread = 2 , nround = 2,
objective = "binary:logistic")
cv_model2 <- xgb.train(data= train.xm, max.depth=4, eta =1,
nthread = 2 , nround = 2,
objective = "binary:logistic")
cv_model2
cv_model2 <- xgb.train(data= train.xm, max.depth=4, eta =1,
nthread = 2 , nround = 2,eval.metric = "error",
objective = "binary:logistic")
cv_model2
cv_model2 <- xgb.train(data= train.xm, max.depth=4, eta =1,
nthread = 2 , nround = 100,eval.metric = "error",
objective = "binary:logistic")
cv_model2
